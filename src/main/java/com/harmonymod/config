package com.harmonymod.config;

import com.electronwill.nightconfig.core.file.CommentedFileConfig;
import net.neoforged.fml.ModLoadingContext;
import net.neoforged.fml.config.ModConfig;

import java.nio.file.Path;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;

/**
 * Loads and provides access to Harmony configuration options.
 */
public class HarmonyConfig {
    public static boolean logAllClaims = false;
    public static boolean allowForceClaim = false;
    public static Set<String> priorityMods = new HashSet<>(Collections.singletonList("harmonymod"));

    public static boolean blockVanillaBiomeChanges = true;
    public static boolean blockVanillaStructureChanges = true;
    public static Set<String> openVanillaBiomes = new HashSet<>();
    public static Set<String> openVanillaStructures = new HashSet<>();

    public static void register() {
        Path configPath = ModLoadingContext.get().getActiveContainer().getModInfo().getOwningFile().getFile().getFilePath().resolveSibling("harmony.toml");
        try (CommentedFileConfig configData = CommentedFileConfig.builder(configPath).autosave().autoreload().build()) {
            configData.load();

            logAllClaims = configData.getOrElse("general.logAllClaims", false);
            allowForceClaim = configData.getOrElse("general.allowForceClaim", false);
            priorityMods = stringSet(configData.getOrElse("general.priorityMods", "harmonymod"));

            blockVanillaBiomeChanges = configData.getOrElse("worldgen.blockVanillaBiomeChanges", true);
            blockVanillaStructureChanges = configData.getOrElse("worldgen.blockVanillaStructureChanges", true);
            openVanillaBiomes = stringSet(configData.getOrElse("worldgen.openVanillaBiomes", "minecraft:plains,minecraft:forest"));
            openVanillaStructures = stringSet(configData.getOrElse("worldgen.openVanillaStructures", "minecraft:village"));
        }
    }

    private static Set<String> stringSet(String csv) {
        if (csv == null || csv.trim().isEmpty()) return new HashSet<>();
        return new HashSet<>(Arrays.asList(csv.split("\\s*,\\s*")));
    }
}
