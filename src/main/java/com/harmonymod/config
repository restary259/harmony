package com.harmonymod.config;

import com.electronwill.nightconfig.core.CommentedConfig;
import com.electronwill.nightconfig.core.file.CommentedFileConfig;
import net.neoforged.fml.config.ModConfig;
import net.neoforged.fml.config.ConfigTracker;
import net.neoforged.fml.loading.FMLPaths;

/**
 * Handles loading and registration of Harmony's configuration settings.
 */
public class HarmonyConfig {
    private static CommentedConfig config;

    /**
     * Register the configuration file with the mod loading context.
     */
    public static void register() {
        String configPath = FMLPaths.CONFIGDIR.get().resolve("harmony.toml").toString();
        config = CommentedFileConfig.builder(configPath)
                .autosave()
                .autoreload()
                .build();
        config.load();

        ConfigTracker.INSTANCE.track(ModConfig.Type.COMMON, config, "harmony.toml");
    }

    /**
     * Get a config value by key.
     * @param key The config property key.
     * @param defaultValue What to return if the key is missing.
     * @return The value from config, or defaultValue if not found.
     */
    public static <T> T get(String key, T defaultValue) {
        if (config != null && config.contains(key)) {
            try {
                return (T) config.get(key);
            } catch (ClassCastException e) {
                // Log and return default
            }
        }
        return defaultValue;
    }

    /**
     * Set a config value by key.
     */
    public static <T> void set(String key, T value) {
        if (config != null) {
            config.set(key, value);
            config.save();
        }
    }
}
